COMPILER_BASE_FOLDER = "$(shell printenv COMPILER_BASE_FOLDER)"
PROJECT_FOLDER_BASE  = $(shell pwd)
PROJECT_FOLDER       = "$(shell cygpath -m $(PROJECT_FOLDER_BASE))"


SRCDIR    		   :=source
BUILDDIR_BASE 	   :=build
INSTALLDIR_BASE    :=build/install
APPEND_RELEASE_DIR :=release
APPEND_DEBUG_DIR   :=debug
APPEND_SHARED_EXT  :=dll
APPEND_STATIC_EXT  :=a
APPEND_DIR_CHOSEN  :=
APPEND_CFG_CHOSEN  :=
BUILDDIR 		   :=$(BUILDDIR_BASE)/
INSTALLDIR         :=$(INSTALLDIR_BASE)

ifndef DEBUG
$(error DEBUG variable isn't defined. Can't proceed with build process)
endif
ifndef SHARED
$(info SHARED variable isn't defined. Can't proceed with build process)
endif


ifeq ('$(DEBUG)' , '1')
	APPEND_DIR_CHOSEN:=$(APPEND_DEBUG_DIR)
else
	APPEND_DIR_CHOSEN:=$(APPEND_RELEASE_DIR)
endif
ifeq ('$(SHARED)' , '1')
	APPEND_CFG_CHOSEN:=$(APPEND_SHARED_EXT)
else
	APPEND_CFG_CHOSEN:=$(APPEND_STATIC_EXT)
endif

PROJNAME = libmonodevkit_$(APPEND_DIR_CHOSEN)
TARGET   = $(PROJNAME)
LINKER   = $(COMPILER_BASE_FOLDER)/bin/ld.lld.exe
CPPC  	 = $(COMPILER_BASE_FOLDER)/bin/clang++.exe
CC  	 = $(COMPILER_BASE_FOLDER)/bin/clang.exe
ASMC 	 = $(COMPILER_BASE_FOLDER)/bin/clang.exe
ARCHIVE  = $(COMPILER_BASE_FOLDER)/bin/ar.exe
RANLIB   = $(COMPILER_BASE_FOLDER)/bin/ranlib.exe
FULL_TARGET:= $(TARGET).$(APPEND_CFG_CHOSEN)
BUILDDIR   := $(BUILDDIR)$(APPEND_DIR_CHOSEN)
INSTALLDIR := $(INSTALLDIR)/lib
OBJDIR     := $(BUILDDIR)/obj
OUTPUTDIR  := $(BUILDDIR)/bin

# Useful debugging information, problem is this shit inserts a newline somewhere for some reason and i hate the formatting :/
# INFO_STRING := $(shell printf "[ DEBUG='$(DEBUG)', SHARED='$(SHARED)', BUILDDIR=["$(BUILDDIR)"] ]" )
# $(info $(INFO_STRING) )


ASMFLAGS   := -O0
CVERSION   := c11
CXXVERSION := c++17
CXXFLAGS_RELEASE := \
	-O3 \
	-ffast-math \

CXXFLAGS_DEBUG := \
	-g \
	-Os \
	-D_DEBUG \

CXXFLAGS := \
	-c \
	-pedantic \
	-Werror \
	-Wall \
	-Wextra \
	-march=native \
	-mtune=native \
	-D_NO_CRT_STDIO_INLINE \

ifeq ('$(DEBUG)' , '1')
	CXXFLAGS += $(CXXFLAGS_DEBUG)
else
	CXXFLAGS += $(CXXFLAGS_RELEASE)
endif


ARCHIVE_FLAGS = 
ifeq ('$(SHARED)' , '1')
	ARCHIVE_FLAGS+= -shared
	ARCHIVE_FLAGS+= -Wl,--subsystem,windows
	ARCHIVE_FLAGS+= -Wl,--out-implib,$(OUTPUTDIR)/$(TARGET)_imp.a
	ARCHIVE_FLAGS+= -fPIC
	ARCHIVE_FLAGS+= --verbose
else
	ARCHIVE_FLAGS+= rcs
endif
ARCHIVE_FLAGS := $(ARCHIVE_FLAGS) \


LIB_FILES     = \
	-nodefaultlibs \
	-lkernel32 \
	-luser32 \
	-lshell32 \
	-ladvapi32 \
	-lmsvcrt \
	-lmsvcrt-os \
	-lpthread \
	-lmoldname \
	-lgcc \
	-lgcc_s \
	-lstdc++ \
	-lmingw32 \
	-lmingwex \
	-lmsvcrt \
	-lmsvcrt-os \
	-lglfw3 \


LIB_INC_PATHS = \
	-I$(PROJECT_FOLDER)/include \
	-I$(COMPILER_BASE_FOLDER)/ext/GLFW/include \

LIB_PATHS     = \
	-L"C:/Windows/SYSTEM32/" \
	-L$(COMPILER_BASE_FOLDER)/ext/GLFW/lib-mingw-w64 \



rwildcard=$(foreach d,$(wildcard $(1:=/*)),$(call rwildcard,$d,$2) $(filter $(subst *,%,$2),$d))

CSRC    = $(call rwildcard,$(SRCDIR),*.c)
CPPSRC += $(call rwildcard,$(SRCDIR),*.cpp)
ASMSRC  = $(call rwildcard,$(SRCDIR),*.asm)
OBJS  = $(patsubst $(SRCDIR)/%.asm,$(OBJDIR)/%_asm.o,$(ASMSRC))
OBJS += $(patsubst $(SRCDIR)/%.c,$(OBJDIR)/%_c.o,$(CSRC))
OBJS += $(patsubst $(SRCDIR)/%.cpp,$(OBJDIR)/%_cpp.o,$(CPPSRC))


# Compile All C, C++, ASM Files that are part of the source directory
$(OBJDIR)/%_asm.o: $(SRCDIR)/%.asm
	@ printf  "[COMPILE][ASM]["$^"] "
	@ mkdir -p $(@D)
	$(ASMC) $(ASMFLAGS) $^ -o $@


$(OBJDIR)/%_c.o: $(SRCDIR)/%.c
	@ printf  "[COMPILE][C]["$^"] "
	@ mkdir -p $(@D)
	$(CC) -std=$(CVERSION) $(CXXFLAGS) $(LIB_INC_PATHS) $^ -o $@ 


$(OBJDIR)/%_cpp.o: $(SRCDIR)/%.cpp
	@ printf  "[COMPILE][CXX]["$^"] "
	@ mkdir -p $(@D)
	$(CPPC) -std=$(CXXVERSION) $(CXXFLAGS) $(LIB_INC_PATHS) $^ -o $@




archive_lib:
	@ echo Building Library ...
ifeq ('$(SHARED)' , '1')
	$(CPPC) -v $(ARCHIVE_FLAGS) -o $(OUTPUTDIR)/$(FULL_TARGET) $(OBJS) $(LIB_PATHS) $(LIB_FILES)
else
	$(ARCHIVE) $(ARCHIVE_FLAGS) $(OUTPUTDIR)/$(FULL_TARGET) $(OBJS)
	$(RANLIB) $(OUTPUTDIR)/$(FULL_TARGET)
endif




build_library: $(OBJS) archive_lib 


install_internal:
	@ printf  "[OUTPUTDIR='$(OUTPUTDIR)', INSTALLDIR='$(INSTALLDIR)'] [B
	-@ cp -rf ./include ./$(INSTALLDIR_BASE)
	-@ cp -rf ./$(OUTPUTDIR)/* ./$(INSTALLDIR)
	@ printf "E Internal Rule Done]"




clean_internal:
	@ printf  "[B"
	-@ rm -r $(OBJDIR)/* &> /dev/null || true
	@ printf "E Internal Done] "

cleanbin_internal:
	@ printf  "[B"
	-@ rm -r $(OUTPUTDIR)/$(FULL_TARGET)  &> /dev/null || true
	-@ rm -r $(OUTPUTDIR)/$(TARGET)_imp.a &> /dev/null || true
	@ printf "E Internal Done] "

cleaninstall_internal:
	@ printf  "[INSTALLDIR='$(INSTALLDIR)'] [B"
	-@ rm -r $(INSTALLDIR)/* &> /dev/null || true
	-@ rm -r $(INSTALLDIR_BASE)/include/* &> /dev/null || true
	@ printf "E Internal Done] "




info:
	@ echo -e "File List: $(ASMSRC) $(CSRC) $(CPPSRC)\nObject List: $(OBJS)\n"


.PHONY: info clean_internal cleanbin_internal cleaninstall_internal install_internal


# Pipe output to file: "make build_library &> debug_out.txt"